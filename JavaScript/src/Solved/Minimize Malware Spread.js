// https://leetcode-cn.com/problems/minimize-malware-spread/
var Test = require('../Common/Test');
// var { DisjointSets } = require('./Common/DisjointSets');
// var { Counter } = require('./Common/Counter');
class DisjointSets {
    constructor(n) {
        this.sets = Array(n).fill();
    }

    union(x1, x2) {
        if (this.find(x1) != this.find(x2)) {
            this.sets[x2] = x1;
            return true;
        }
        return false;
    }

    find(x) {
        let root = x;
        while (undefined != this.sets[root]) {
            root = this.sets[root];
        }
        if (root != x) this.sets[x] = root;
        return root;
    }
}

class Counter extends Map {
    inc(key, count) {
        count = undefined != count ? count : 1;
        if (!this.has(key)) {
            this.set(key, count);
        }
        else {
            this.set(key, this.get(key) + count);
        }
    }

    get(key) {
        return this.has(key) ? super.get(key) : 0;
    }
}

var minMalwareSpread = function (graph, initial) {
    const n = graph.length;

    initial.sort((a, b) => a - b);

    const disjointSets = new DisjointSets(n);
    for (let i = 0; i < n; i++) {
        for (let j = 0; j < n; j++) {
            if (i != j && graph[i][j]) {
                disjointSets.union(i, j);
            }
        }
    }

    const counter = new Counter();
    for (let i = 0; i < n; i++) {
        counter.inc(disjointSets.find(i));
    }

    const map = new Map();
    for (const i of initial) {
        const key = disjointSets.find(i);
        if (!map.has(key)) {
            map.set(key, []);
        }
        map.get(key).push(i);
    }

    const arr = [...map]
        .filter(([, nodes]) => nodes.length == 1)
        .sort((a, b) => counter.get(b[0]) - counter.get(a[0]));

    return arr.length ? arr[0][1][0] : initial[0];
};

function run(graph, initial) {
    Test.run(minMalwareSpread, graph, initial);
}

// run([[1, 1, 0], [1, 1, 0], [0, 0, 1]], [0, 1])
// run([[1, 0, 0], [0, 1, 0], [0, 0, 1]], [0, 2])
// run([[1, 1, 1], [1, 1, 1], [1, 1, 1]], [1, 2])
run([[1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1]], [5, 0])
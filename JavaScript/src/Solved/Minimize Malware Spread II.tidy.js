// https://leetcode-cn.com/problems/minimize-malware-spread-ii/
var Test = require('./Common/Test');
// var { DisjointSets } = require('./Common/DisjointSets');
// var { Counter } = require('./Common/Counter');

class Counter extends Map {
    inc(key, count) {
        count = undefined != count ? count : 1;
        if (!this.has(key)) {
            this.set(key, count);
        }
        else {
            this.set(key, this.get(key) + count);
        }
    }
}

var minMalwareSpread = function (graph, initial) {
    const n = graph.length;
    initial.sort((a, b) => a - b);
    const initialSet = new Set(initial);
    const sources = Array.from({ length: n }, () => []);

    for (const i of initial) {
        dfs(i, i, new Set());
    }

    const counter = new Counter();
    for (let i = 0; i < n; i++) {
        const source = sources[i];
        if (source.length == 1) {
            counter.inc(source[0]);
        }
    }
    const arr = [...counter].sort((a, b) => b[1] - a[1]);
    return arr.length ? arr[0][0] : initial[0];

    function dfs(i, root, visited) {
        if (!visited.has(i)) {
            visited.add(i);
            sources[i].push(root);
            for (let j = 0; j < n; j++) {
                if (i != j && graph[i][j] && !initialSet.has(j)) {
                    dfs(j, root, visited);
                }
            }
        }
    };
}

function run(graph, initial) {
    Test.run(minMalwareSpread, graph, initial);
}

// run([[1, 1, 0], [1, 1, 0], [0, 0, 1]], [0, 1])
// run([[1, 0, 0], [0, 1, 0], [0, 0, 1]], [0, 2])
// run([[1, 1, 1], [1, 1, 1], [1, 1, 1]], [1, 2])

// run([[1, 1, 0], [1, 1, 1], [0, 1, 1]], [0, 1])
run([[1, 1, 0, 0], [1, 1, 1, 0], [0, 1, 1, 1], [0, 0, 1, 1]], [0, 1])
run([[1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1]], [5, 0])
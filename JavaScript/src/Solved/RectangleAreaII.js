// https://leetcode-cn.com/problems/rectangle-area-ii/
var Test = require('../Common/Test');
const { remove } = require('lodash');

var rectangleArea = function (rectangles) {
    const sides = [];
    for (const [x1, y1, x2, y2] of rectangles) {
        const segment = [y1, y2];
        sides.push({ isLeft: true, x: x1, segment });
        sides.push({ isLeft: false, x: x2, segment });
    }
    sides.sort((s1, s2) => s1.x - s2.x);

    const segments = [];
    let area = 0n;
    let prevX = 0;
    for (const { isLeft, x, segment } of sides) {
        if (x != prevX) {
            area += calcPartArea(x);
            prevX = x;
        }
        if (isLeft) {
            insertSegment(segment);
        }
        else {
            removeSegment(segment);
        }
    }

    return area % 1000000007n;

    function insertSegment(segment) {
        const [start, end] = segment;
        const i = segments.findIndex(segment => start < segment[0] || (start == segment[0] && end > segment[1]));
        if (i == -1) {
            segments.push(segment);
        }
        else {
            segments.splice(i, 0, segment);
        }
    }

    function removeSegment(segment) {
        // const i = segments.findIndex(s => segment == s);
        const i = segments.indexOf(segment);
        if (i != -1) {
            segments.splice(i, 1);
        }
    }

    function calcPartArea(x) {
        const combinedSegments = [];
        for (const segment of segments) {
            if (combinedSegments.length == 0) {
                combinedSegments.push(segment.slice());
            }
            else {
                const prevSegment = combinedSegments[combinedSegments.length - 1];
                const end1 = prevSegment[1];
                const [start2, end2] = segment;
                switch (true) {
                    case start2 < end1:
                        prevSegment[1] = Math.max(end1, end2);
                        break;
                    case start2 == end1:
                        prevSegment[1] = end2;
                        break;
                    case start2 > end1:
                        combinedSegments.push(segment.slice());
                        break;
                }
            }
        }
        const width = BigInt(x - prevX);
        return combinedSegments.map(([start, end]) => BigInt(end - start)).reduce((area, height) => area + width * height, 0n);
        // let area = 0n;
        // for (const [start, end] of combinedSegments) {
        //     area += BigInt(x - prevX) * BigInt(end - start);
        // }
        // return area;
    }
};

function test(rectangles) {
    Test.test(rectangleArea, rectangles);
}

test([[0, 0, 2, 2], [1, 0, 2, 3], [1, 0, 3, 1]]);
test([[0, 0, 2, 2], [1, 0, 2, 3], [1, 0, 3, 1], [2, 0, 3, 5]]);
// test([[0, 0, 2, 2], [1, 1, 2, 3], [1, 0, 3, 1]]);
// test([[0, 0, 2, 2], [1, 10, 2, 12], [1, 0, 3, 1]]);
// test([[0, 0, 2, 2], [1, 10, 3, 12], [1, 0, 3, 1]]);
// test([[0, 0, 1000000000, 1000000000]]);
// test([[0, 0, 3, 3], [2, 0, 5, 3], [1, 1, 4, 4]]);
// test([[49, 40, 62, 100], [11, 83, 31, 99], [19, 39, 30, 99]]);
// test([[29, 64, 74, 98], [19, 20, 96, 33], [7, 9, 19, 98], [6, 31, 63, 65], [13, 40, 97, 74], [4, 40, 57, 85]]);
test([[224386961, 128668997, 546647847, 318900555], [852286866, 238086790, 992627088, 949888275], [160239672, 137108804, 398130330, 944807066], [431047948, 462092719, 870611028, 856851714], [736895365, 511285772, 906155231, 721626624], [289309389, 607009433, 558359552, 883664714], [780746435, 397872372, 931219192, 863727103], [573523994, 124874359, 889018012, 471879750], [619886375, 149607927, 727026507, 446976526], [51739879, 716225241, 115331335, 785850603], [171077223, 267051983, 548436248, 349498903], [314437215, 169054168, 950814572, 481179241], [64126215, 646689712, 595562376, 829164135], [926011655, 481539702, 982179297, 832455610], [40370235, 231510218, 770233582, 851797196], [292546319, 45032676, 413358795, 783606009], [424366277, 369838051, 453541063, 777456024], [211837048, 142665527, 217366958, 952362711], [228416869, 402115549, 672143142, 644930626], [755018294, 194555696, 846854520, 939022548], [192890972, 586071668, 992336688, 759060552], [127869582, 392855032, 338983665, 954245205], [665603955, 208757599, 767586006, 276627875], [260384651, 10960359, 736299693, 761411808], [46440611, 559601039, 911666265, 904518674], [54013763, 90331595, 332153447, 106222561], [73093292, 378586103, 423488105, 826750366], [327100855, 516514806, 676134763, 653520887], [930781786, 407609872, 960671631, 510621750], [35479655, 449171431, 931212840, 617916927]]);
// test([[224386961, 128668997, 546647847, 318900555]]);

// [[0, 0, 2, 2], [1, 0, 2, 3], [1, 0, 3, 1]]
// [[0, 0, 2, 2], [1, 1, 2, 3], [1, 0, 3, 1]]
// [[0, 0, 2, 2], [1, 10, 2, 12], [1, 0, 3, 1]]
// [[0, 0, 2, 2], [1, 10, 3, 12], [1, 0, 3, 1]]
// [[0, 0, 1000000000, 1000000000]]
// [[0, 0, 3, 3], [2, 0, 5, 3], [1, 1, 4, 4]]
// [[49, 40, 62, 100], [11, 83, 31, 99], [19, 39, 30, 99]]
// [[29, 64, 74, 98], [19, 20, 96, 33], [7, 9, 19, 98], [6, 31, 63, 65], [13, 40, 97, 74], [4, 40, 57, 85]]
// [[224386961, 128668997, 546647847, 318900555], [852286866, 238086790, 992627088, 949888275], [160239672, 137108804, 398130330, 944807066], [431047948, 462092719, 870611028, 856851714], [736895365, 511285772, 906155231, 721626624], [289309389, 607009433, 558359552, 883664714], [780746435, 397872372, 931219192, 863727103], [573523994, 124874359, 889018012, 471879750], [619886375, 149607927, 727026507, 446976526], [51739879, 716225241, 115331335, 785850603], [171077223, 267051983, 548436248, 349498903], [314437215, 169054168, 950814572, 481179241], [64126215, 646689712, 595562376, 829164135], [926011655, 481539702, 982179297, 832455610], [40370235, 231510218, 770233582, 851797196], [292546319, 45032676, 413358795, 783606009], [424366277, 369838051, 453541063, 777456024], [211837048, 142665527, 217366958, 952362711], [228416869, 402115549, 672143142, 644930626], [755018294, 194555696, 846854520, 939022548], [192890972, 586071668, 992336688, 759060552], [127869582, 392855032, 338983665, 954245205], [665603955, 208757599, 767586006, 276627875], [260384651, 10960359, 736299693, 761411808], [46440611, 559601039, 911666265, 904518674], [54013763, 90331595, 332153447, 106222561], [73093292, 378586103, 423488105, 826750366], [327100855, 516514806, 676134763, 653520887], [930781786, 407609872, 960671631, 510621750], [35479655, 449171431, 931212840, 617916927]]